import streamlit as st
from rag_pipeline import RAGPipeline
import pandas as pd
import os
from datetime import datetime

# ----------- Function to Save Chat History --------------
def save_chat_to_csv(question, answer, filename="chat_log.csv"):
    data = {
        "Timestamp": [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
        "Question": [question],
        "Answer": [answer]
    }
    df = pd.DataFrame(data)
    if os.path.exists(filename):
        df.to_csv(filename, mode="a", header=False, index=False)
    else:
        df.to_csv(filename, index=False)

# ----------- Streamlit UI Setup ------------------------
st.set_page_config(page_title="Resume Bot - RAG", layout="centered")
st.title("Hemanth Mydugolam - Resume Bot")

st.markdown(
    """
    Welcome! This app allows you to ask questions about my professional resume.
    The answers are generated by an AI model augmented with my resume content,
    providing accurate and relevant responses.

    📌 *Please be respectful and avoid asking personal or inappropriate questions.*
    """
)

# Suggested questions
suggested_questions = [
    "What skills does Hemanth have?",
    "Tell me about Hemanth's work experience.",
    "Proud project Hemanth has worked on?",
    "What education background do Hemanth have?",
    "What are Hemanth's certifications?"
]

# Initialize session state
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "question" not in st.session_state:
    st.session_state.question = ""

# Load RAG pipeline
@st.cache_resource
def get_pipeline():
    return RAGPipeline()

pipeline = get_pipeline()

# Suggested question buttons
st.markdown("### Suggested Questions:")
cols = st.columns(len(suggested_questions))
for i, question_text in enumerate(suggested_questions):
    if cols[i].button(question_text):
        st.session_state.question = question_text

# Input field
question = st.text_input(
    "Ask me anything about my resume:",
    value=st.session_state.get("question", ""),
    placeholder="Type your question here or click a suggestion above."
)

# Response logic
if question:
    with st.spinner("Searching for answers..."):
        result = pipeline.query(question)

    answer = result.get("answer", "").strip()

    if not answer:
        st.warning("🤖 Sorry, I couldn't find a relevant answer. Please try rephrasing your question.")
    else:
        st.markdown("### 🧠 Answer:")
        st.success(answer)

        #st.markdown("### 📚 Source Documents:")
        #for filename, page, score in result["results"]:
        #    st.markdown(f"- **File:** `{filename}` | **Page:** {page} | **Similarity:** {score}")

        # Save to CSV (not shown on UI)
        save_chat_to_csv(question, answer)

        # Store in session state
        st.session_state.chat_history.append((question, answer))

        # Feedback
        st.markdown("### 🙋 Was this answer helpful?")
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("👍 Yes"):
                st.toast("Thanks for your feedback!", icon="👍")
        with col2:
            if st.button("👎 No"):
                st.toast("We'll try to do better. Try rephrasing your question!", icon="💡")
else:
    st.info("Please enter a question above to get started.")
